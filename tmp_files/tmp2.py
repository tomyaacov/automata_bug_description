import os
import statistics
from aalpy.base.SUL import CacheSUL
from rers_sul import RERSSUL
from data.counter_examples import counter_examples_dict
for file_name in os.listdir("../model_checker_output"):

    len_list = []
    # if file_name.replace(".out", "") in ["m158", "m159", "m164", "m172", "m181", "m183", "m54", "m95", "m167", "m173",
    #                                      "m182", "m189", "m190", "m196", "m199", "m22", "m27", "m41", "m135", "m76", "m132", "m49", "m131"]:
    #     continue
    # if file_name.replace(".out", "") in ["m54","m183","m196","m45"]:
    #     continue
    # if file_name.replace(".out", "") not in ["m182"]:
    #     continue
    # print(file_name)
    with open(f"model_checker_output/{file_name}") as f:
        all_data = f.read()
        for i in range(0, 100):
            word = []
            first = all_data.find(f"start looking for error {i}")
            second = all_data.find(f"done looking for error {i}")
            data = all_data[first:second]

            a = data.find("String[] inputs = {")
            l_str = data[a + len("String[] inputs = {"):data.find("}", a)]
            alphabet = l_str.replace('"', "").split(",")
            transitions_split = data.split("- transition #")
            for transitions_str in transitions_split[2:]:
                idx_str = transitions_str[transitions_str.find("cur=") + len("cur="):transitions_str.find("]")]
                word.append(alphabet[int(idx_str)])
            if "java.lang.AssertionError  at Errors.__VERIFIER_err" not in data:
                # print("*", end="")
                continue
            # if 'usr2_ai1_VoidReply' in word:
            #     continue
            # print(i, len(word), word, sep=";")
            len_list.append(len(word))
            # print(word, ",")

            # benchmark = file_name.replace(".out", "")
            #
            # sul = CacheSUL(RERSSUL(benchmark=benchmark, for_T=False, is_prefix_closed=False, is_suffix_closed=True))
            #
            # print(sul.query(tuple(word)))
    if len(len_list) > 1:
        print(file_name.replace(".out", ""),
              len(len_list),
              min(len_list),
              max(len_list),
              statistics.mean(len_list),
              statistics.median(len_list),
              len(counter_examples_dict[file_name.replace(".out", "")]["1"][0][1]),
              sep=",")

# import matplotlib.pyplot as plt
# len_list = [16, 11, 14, 13, 15, 12, 12, 18, 12, 16, 15, 6, 14, 16, 13, 16, 16, 14, 12, 7, 15, 3, 14, 13, 19, 13, 1, 15, 17, 5, 15, 13, 1, 8, 15, 13, 18, 14, 7, 13, 14, 5, 12, 5, 8, 2, 14, 11, 7, 13, 15, 5, 9, 14, 6, 12, 14, 15, 3, 12, 5, 11, 2, 12, 2, 13, 11, 9, 12, 12, 13, 6, 13, 3, 13, 13, 12, 6, 7, 8, 11, 11, 13, 11, 6, 1, 13, 8, 7, 11, 12, 7, 6, 11, 7, 13, 5, 8, 8, 8, 7, 3, 3, 5, 3, 4, 4, 5, 4, 5, 5, 4, 4, 4, 5, 5, 5, 5, 5, 4, 6, 5, 4, 5, 6, 6, 5, 6, 5, 4, 3, 2, 5, 7, 4, 8, 7, 6, 8, 8, 7, 7, 6, 6, 6, 8, 7, 8, 7, 7, 7, 7, 8, 5, 6, 9, 9, 8, 8, 7, 10, 5, 7, 10, 9, 8, 7, 6, 7, 9, 6, 8, 5, 8, 8, 6, 5, 6, 8, 7, 5, 2, 8, 9, 5, 7, 5, 8, 9, 7, 6, 7, 6, 7, 8, 6, 5, 8, 7, 6, 7, 4, 10, 8, 7, 6, 7, 9, 7, 9, 10, 8, 9, 8, 9, 10, 10, 7, 8, 9, 8, 1, 1, 4, 2, 3, 4, 2, 6, 2, 2, 3, 4, 4, 2, 2, 1, 2, 5, 6, 5, 3, 2, 6, 3, 5, 6, 4, 3, 2, 3, 2, 3, 5, 6, 3, 1, 1, 2, 3, 2, 3, 4, 3, 1, 2, 2, 4, 2, 5, 2, 2, 5, 3, 6, 4, 2, 12, 12, 12, 12, 13, 15, 15, 12, 7, 12, 11, 8, 11, 17, 13, 8, 17, 16, 14, 13, 15, 10, 16, 18, 14, 9, 12, 11, 9, 10, 13, 13, 14, 13, 12, 16, 14, 12, 15, 11, 13, 11, 18, 15, 11, 18, 14, 14, 17, 15, 11, 7, 10, 10, 10, 10, 10, 7, 13, 7, 9, 8, 8, 8, 8, 10, 9, 9, 10, 10, 9, 9, 7, 8, 7, 7, 9, 8, 11, 10, 10, 7, 10, 10, 12, 8, 12, 8, 11, 10, 9, 12, 7, 8, 12, 8, 9, 5, 9, 11, 8, 11, 9, 9, 10, 9, 8, 10, 2, 10, 7, 6, 10, 11, 12, 8, 4, 10, 12, 9, 11, 9, 5, 11, 8, 11, 10, 12, 10, 12, 10, 10, 9, 11, 10, 7, 7, 8, 7, 5, 9, 10, 5, 7, 7, 8, 10, 10, 11, 5, 4, 6, 2, 5, 9, 2, 4, 5, 10, 5, 9, 6, 12, 10, 11, 2, 3, 6, 6, 3, 3, 12, 4, 3, 7, 5, 12, 10, 11, 2, 5, 11, 6, 9, 6, 10, 7, 5, 8, 6, 8, 2, 10, 5, 6, 6, 7, 8, 12, 9, 2, 3, 4, 12, 2, 8, 8, 6, 12, 3, 7, 2, 4, 3, 6, 11, 11, 3, 6, 10, 7, 5, 6, 6, 10, 8, 5, 6, 3, 8, 5, 7, 3, 5, 5, 6, 3, 5, 7, 2, 6, 6, 5, 5, 6, 1, 9, 2, 1, 9, 10, 3, 7, 5, 6, 1, 6, 8, 5, 11, 9, 11, 5, 7, 5, 5, 7, 5, 2, 9, 8, 3, 3, 6, 3, 5, 4, 9, 4, 6, 2, 5, 2, 3, 3, 8, 4, 5, 3, 4, 6, 2, 5, 7, 1, 4, 3, 4, 7, 8, 3, 3, 4, 5, 4, 6, 3, 5, 3, 3, 3, 4, 3, 8, 5, 6, 3, 4, 4, 3, 4, 3, 6, 4, 4, 3, 3, 3, 6, 6, 3, 3, 3, 3, 5, 5, 3, 6, 3, 1, 8, 4, 5, 6, 3, 3, 4, 8, 7, 5, 3, 3, 3, 4, 4, 4, 5, 8, 6, 5, 5, 4, 6, 2, 3, 4, 1, 5, 5, 5, 6, 1, 5, 6, 4, 6, 4, 3, 1, 4, 6, 5, 7, 3, 10, 7, 6, 6, 3, 5, 7, 6, 6, 7, 5, 5, 5, 3, 5, 8, 6, 3, 7, 5, 1, 10, 7, 8, 6, 2, 6, 6, 5, 6, 3, 6, 1, 9, 5, 2, 5, 8, 5, 1, 9, 3, 8, 6, 7, 5, 2, 6, 5, 6, 1, 6, 9, 6, 5, 7, 5, 5, 7, 5, 2, 9, 6, 9, 9, 6, 6, 5, 4, 3, 2, 2, 7, 2, 1, 5, 6, 4, 3, 7, 5, 5, 5, 5, 5, 5, 6, 7, 7, 8, 6, 1, 7, 3, 5, 6, 5, 4, 7, 2, 5, 3, 8, 7, 4, 1, 3, 6, 4, 8, 6, 5, 6, 4, 8, 5, 6, 3, 5, 8, 8, 8, 6, 7, 6, 1, 3, 7, 5, 5, 5, 3, 6, 8, 4, 5, 4, 5, 6, 1, 5, 6, 5, 8, 7, 9, 8, 9, 10, 8, 5, 9, 8, 8, 7, 7, 7, 9, 7, 9, 8, 9, 7, 7, 7, 10, 7, 11, 11, 4, 3, 7, 10, 10, 13, 11, 8, 10, 7, 10, 8, 11, 7, 8, 7, 7, 8, 12, 10, 7, 8, 12, 7, 9, 9, 10, 9, 9, 9, 7, 8, 11, 1, 9, 10, 11, 7, 7, 7, 1, 9, 9, 4, 8, 9, 5, 9, 7, 7, 10, 4, 11, 11, 7, 9, 7, 11, 4, 8, 12, 8, 9, 9, 12, 10, 9, 6, 10, 10, 8, 3, 11, 14, 9, 10, 12, 9, 10, 4, 8, 11, 9, 9, 5, 15, 14, 9, 11, 7, 10, 14, 3, 6, 13, 9, 9, 4, 13, 11, 11, 14, 11, 4, 11, 10, 12, 11, 13, 9, 12, 15, 7, 10, 11, 3, 11, 11, 13, 9, 11, 14, 15, 5, 7, 8, 11, 11, 9, 12, 10, 10, 13, 12, 13, 8, 9, 14, 10, 9, 12, 11, 14, 3, 14, 8, 13, 7, 11, 4, 12, 11, 10, 9, 9, 9, 10, 5, 7, 6, 9, 2, 11, 14, 11, 2, 14, 14, 11, 14, 8, 7, 11, 9, 6, 7, 10, 6, 9, 8, 7, 10, 9, 8, 10, 11, 10, 9, 11, 8, 10, 7, 10, 9, 9, 11, 11, 8, 13, 10, 11, 8, 10, 9, 6, 10, 5, 15, 1, 11, 4, 7, 2, 8, 9, 8, 9, 9, 10, 13, 15, 11, 13, 7, 6, 14, 9, 5, 7, 8, 9, 8, 11, 9, 9, 8, 9, 12, 10, 8, 13, 10, 8, 10, 7, 10, 6, 6, 8, 7, 6, 12, 12, 8, 5, 2, 13, 12, 9, 11, 13, 13, 2, 10, 13, 12, 11, 12, 2, 13, 8, 12, 10, 13, 2, 11, 11, 9, 11, 13, 12, 12, 13, 13, 12, 11, 12, 12, 9, 13, 2, 6, 13, 13, 12, 13, 7, 9, 1, 7, 6, 4, 6, 7, 3, 9, 5, 2, 4, 7, 7, 4, 1, 4, 9, 2, 8, 7, 9, 8, 5, 3, 7, 3, 9, 5, 2, 7, 9, 7, 4, 8, 5, 5, 8, 1, 7, 8, 9, 2, 6, 5, 1, 3, 9, 8, 9, 8, 7, 1, 7, 5, 5, 8, 2, 4, 7, 2, 7, 4, 7, 5, 7, 7, 7, 7, 5, 13, 11, 4, 16, 8, 10, 11, 1, 16, 13, 10, 16, 16, 12, 7, 11, 16, 16, 13, 13, 9, 15, 16, 7, 10, 3, 10, 13, 9, 14, 9, 5, 16, 7, 10, 11, 13, 6, 14, 3, 10, 4, 14, 11, 13, 14, 13, 14, 16, 16, 9, 11, 4, 4, 5, 4, 4, 5, 2, 3, 5, 5, 3, 6, 3, 4, 4, 3, 4, 4, 6, 6, 4, 3, 1, 3, 4, 2, 2, 2, 3, 2, 3, 4, 3, 5, 6, 4, 4, 5, 5, 3, 4, 5, 3, 3, 6, 3, 4, 4, 5, 4, 5, 4, 3, 2, 4, 5, 5, 5, 5, 4, 5, 5, 5, 3, 4, 3, 3, 3, 4, 2, 3, 3, 3, 5, 4, 4, 4, 3, 3, 4, 2, 4, 3, 5, 3, 5, 4, 5, 5, 5, 5, 5, 3, 3, 5, 5, 2, 3, 3, 2, 3, 4, 4, 5, 5, 5, 3, 2, 5, 3, 3, 3, 4, 5, 5, 4, 5, 5, 5, 5, 3, 1, 5, 2, 3, 3, 3, 5, 4, 3, 3, 5, 4, 4, 5, 4, 3, 5, 5, 5, 4, 3, 3, 5, 3, 3, 5, 3, 5, 3, 5, 3, 3, 2, 11, 17, 9, 7, 16, 11, 11, 17, 8, 8, 11, 6, 14, 18, 14, 9, 8, 13, 9, 9, 8, 11, 4, 15, 15, 4, 12, 5, 9, 12, 18, 15, 12, 13, 2, 12, 3, 11, 8, 12, 7, 15, 6, 8, 14, 15, 12, 10, 16, 16, 14, 17, 13, 17, 13, 11, 12, 3, 11, 12, 9, 11, 9, 7, 7, 16, 7, 9, 12, 13, 13, 14, 10, 18, 9, 7, 9, 10, 2, 2, 9, 6, 6, 5, 2, 7, 5, 8, 2, 10, 6, 5, 7, 4, 10, 7, 6, 7, 5, 6, 6, 9, 8, 5, 10, 10, 9, 7, 9, 5, 8, 5, 10, 4, 2, 8, 9, 6, 3, 10, 5, 5, 4, 7, 4, 4]
# print(len_list)
# plt.hist(len_list, bins=20, rwidth=0.6)
# plt.xticks(range(max(len_list)+1))
# plt.show()

